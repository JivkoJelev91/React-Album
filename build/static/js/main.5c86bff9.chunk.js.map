{"version":3,"sources":["reducers/index.js","reducers/postReducer.js","actions/types.js","reducers/getFavoritesReducer.js","store/index.js","components/navbar/NavBar.js","components/images/Images.js","actions/postActions.js","components/Favorites.js","components/AllImages.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","favorite_images","state","arguments","length","undefined","actions","type","payload","get_favorites","persistConfig","key","storage","prReducer","persistReducer","reducers","store","createStore","applyMiddleware","thunk","persistor","persistStore","NavBar","react_default","a","createElement","AppBar_default","title","Images","images","open","currentImg","totalPage","currentPage","perPage","favorites","array","getData","axios","get","then","res","prev","_this","next","data","setState","slice","catch","err","console","log","getCurrentPage","event","nextPage","activePage","getFavoriteImg","e","img","index","indexOf","id","splice","push","props","save_favorite_icons","Object","toConsumableArray","Set","get_favorites_imgs","handleOpen","handleClose","this","get_favorites_icons","_this2","FlatButton_default","label","primary","onClick","GridList","cols","map","actionIcon","className","IconButton_default","zoom_in_default","color","url","favorite_default","src","alt","Dialog_default","modal","onRequestClose","style","width","Pagination","defaultActivePage","totalPages","onPageChange","CircularProgress_default","Component","connect","dispatch","icons","Favorites","sort","b","isActive","AllImages","getImages","clearAllFavoriteImgs","purge","window","location","reload","navbar_NavBar","Button","fluid","components_Favorites","images_Images","App","es","integration_react","loading","MuiThemeProvider_default","components_AllImages","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c86bff9.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\nimport favoritesImgs from './postReducer';\nimport getFavorites from './getFavoritesReducer';\n\nexport default combineReducers({\n    favorite_images: favoritesImgs,\n    get_favorites: getFavorites\n})\n","import { GET_IMAGES } from '../actions/types';\n\nexport default (state = [], actions) => {\n    if(actions.type === GET_IMAGES){\n        return actions.payload\n    }\n    return state;\n}","export const GET_IMAGES = 'GET_IMAGES';\nexport const GET_FAVORITES = 'GET_FAVORITES';","import { GET_FAVORITES } from '../actions/types';\n\nexport default (state = [], actions) => {\n    if(actions.type === GET_FAVORITES){\n        return actions.payload\n    }\n    return state;\n}","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web and AsyncStorage for react-native\nimport thunk from 'redux-thunk';\n\nimport reducers from '../reducers/';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n };\n\n const prReducer = persistReducer(persistConfig, reducers);\n\nexport const store = createStore(prReducer, applyMiddleware(thunk));\nexport const persistor = persistStore(store);","import React from 'react'\nimport AppBar from 'material-ui/AppBar';\n\nconst NavBar = () => <AppBar title=\"Images\" />\n \nexport default NavBar;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList/';\nimport CircularProgress from 'material-ui/CircularProgress';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Favorite from 'material-ui/svg-icons/action/favorite';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\nimport { Pagination } from 'semantic-ui-react';\nimport {get_favorites_imgs} from '../../actions/postActions';\nimport {save_favorite_icons} from '../../actions/postActions';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\n \nclass Images extends Component {\n   \n    state = {\n        images: [],\n        open: false,\n        currentImg: '',\n        totalPage: 0,\n        currentPage: 1,\n    };\n    \n    perPage = 20;\n    favorites= [];\n    array = [];\n   \n    componentDidMount(){\n        this.getData();\n        if(this.props.favorite_images.length > 0) {\n            this.array = this.props.get_favorites_icons;\n            this.favorites = this.props.favorite_images;\n        }\n    }\n\n    getData = () => {\n        axios.get('https://jsonplaceholder.typicode.com/photos')\n        .then((res) => {\n            let prev = this.perPage * (this.state.currentPage-1);\n            let next = this.perPage * this.state.currentPage;\n            let totalPage = res.data.length / this.perPage;\n            this.setState({\n                images: res.data.slice(prev,next),\n                totalPage: totalPage,\n            });\n        })\n        .catch(err => console.log(err));\n    }\n \n    getCurrentPage = (event, data) => {\n        const nextPage = data.activePage;\n        this.setState({currentPage: nextPage});\n        this.getData();\n    }\n \n    getFavoriteImg = (e,img) => {\n        let index = this.array.indexOf(img.id); \n        if(index > -1) {\n            this.array.splice(index, 1);\n            this.favorites.splice(index,1);\n        }else{\n            this.array.push(img.id);\n            this.favorites.push(img);\n        }\n        this.props.save_favorite_icons([...new Set(this.array)]);\n        this.props.get_favorites_imgs([...new Set(this.favorites)]);\n    }\n \n    handleOpen = img => this.setState({open:true,currentImg: img})\n \n    handleClose = () => this.setState({open:false})\n \n    render() {\n        const actions = [\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n        ];\n\n        if(this.state.images.length > 0){\n            return (\n                <div>\n                    <GridList cols={4}>\n                        {/* All images of current page  */}\n                        {this.state.images.map((img) => (\n                            <GridTile\n                            key={img.id}\n                            title={img.title}\n                            actionIcon = {\n                                <div className=\"icons\">\n                                    <span>\n                                        <IconButton  >\n                                            <ZoomIn color='#000' onClick={() => this.handleOpen(img.url)}/>\n                                        </IconButton>\n                                    </span>\n                                    <span onClick={(e) => this.getFavoriteImg(e,img)}>\n                                        <IconButton  >\n                                            <Favorite  color={this.props.get_favorites_icons.indexOf(img.id) > -1 ? \"red\" : \"black\"}/>\n                                        </IconButton>\n                                    </span>\n                                </div>\n                            }>\n                                <img src={img.url} alt={img.title}/>\n                            </GridTile>\n                        ))}\n                    </GridList>\n                    {/*The modal with clicked img */}\n                    <Dialog\n                    actions={actions}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}>\n                        <img src={this.state.currentImg} alt=\"img\" style={{width: '100%'}} />\n                    </Dialog>\n                    {/* Paginator */}\n                    <div id=\"paginator\">\n                        <Pagination\n                        defaultActivePage={1}\n                        totalPages={this.state.totalPage}\n                        onPageChange={this.getCurrentPage}\n                         />\n                    </div>\n                </div>\n            )\n        }else{\n            return (\n                <div id=\"wrapper\">\n                    {/* Loader */}\n                    <div className=\"spinner\">\n                        <CircularProgress />\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nImages.propTypes = {\n    favorite_images: PropTypes.array.isRequired,\n    get_favorites_icons: PropTypes.array.isRequired\n};\n \nfunction map_state_to_props(state){\n    return {\n        favorite_images: state.favorite_images,    // must be same as initialstate in the reducer\n        get_favorites_icons:  state.get_favorites  // must be same as initialstate in the reducer\n    }\n}\n \nexport default connect(map_state_to_props,{get_favorites_imgs, save_favorite_icons})(Images)","import { GET_IMAGES } from './types';\nimport { GET_FAVORITES } from './types';\n\nexport const get_favorites_imgs = (img) => dispatch => {\n   dispatch({\n       type: GET_IMAGES,\n       payload: img\n   })\n}\n\nexport const save_favorite_icons = (icons) => dispatch => {\n    dispatch({\n       type: GET_FAVORITES,\n        payload: icons\n    })\n}","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList/';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport FlatButton from 'material-ui/FlatButton';\nimport IconButton from 'material-ui/IconButton';\nimport Dialog from 'material-ui/Dialog';\n\nclass Favorites extends Component {\n\n    state = {\n        images: [],\n        open: false,\n    }\n\n    componentDidMount(){\n        this.setState({\n            images: this.props.favorite_images.sort((a,b) => a.id - b.id) // Sort favorite images\n        });\n    }\n\n    handleOpen = img => this.setState({open:true,currentImg: img})\n \n    handleClose = () => this.setState({open:false})\n\n    render() {\n        const actions = [\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n        ];\n\n        if(this.props.isActive && this.props.favorite_images.length > 0){\n            return (\n                <div>\n                     <GridList cols={4}>\n                        {/* All images of current page  */}\n                        {this.state.images.map((img, index) => (\n                            <GridTile\n                            title={img.title}\n                            key={index}\n                            actionIcon = {\n                                <IconButton >\n                                    <ZoomIn color='#000' onClick={() => this.handleOpen(img.url)}/>\n                                </IconButton>\n                            }>\n                                <img src={img.url} alt={img.title}/>\n                            </GridTile>\n                        ))}\n                    </GridList>\n                    {/*The modal with clicked img */}\n                    <Dialog\n                    actions={actions}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}>\n                        <img src={this.state.currentImg} alt=\"img\" style={{width: '100%'}} />\n                    </Dialog>\n                </div>\n            )\n        }else{\n            return <h1>There is no favorite image!</h1>\n        }\n    }\n}\n\nFavorites.propTypes = {\n    favorite_images: PropTypes.array.isRequired,\n    isActive: PropTypes.bool.isRequired\n}\n\nfunction map_state_to_props(state){\n    return {\n        favorite_images: state.favorite_images,    // must be same as initialstate in the reducer\n    }\n}\n\nexport default connect(map_state_to_props)(Favorites);\n\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport NavBar from './navbar/NavBar';\nimport Images from './images/Images';\nimport Favorites from './Favorites';\nimport { Button } from 'semantic-ui-react';\nimport FlatButton from 'material-ui/FlatButton';\nimport { persistor } from '../store/index';\n\nclass AllImages extends Component {\n\n    state = {isActive: false};\n  \n    getImages = () => this.setState({isActive: !this.state.isActive})\n\n    clearAllFavoriteImgs = () => persistor.purge() && window.location.reload();\n    \n    render() {\n        const actions = [\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n        ];\n        return (\n            <div>\n                <NavBar />\n                    <Button fluid className=\"favoriteBtn\" onClick={this.getImages}>\n                        {this.state.isActive ? <h2>All images</h2> : <h2>Look your favorite images</h2>}\n                    </Button>\n                    <div>\n                        {!this.state.isActive ? <Images actions={actions}/> : <Favorites isActive={this.state.isActive} actions={actions}/>}\n                    </div>\n                    <div>\n                        {this.props.favorite_images.length > 0 ?\n                        <Button fluid className=\"favoriteBtn\" onClick={this.clearAllFavoriteImgs}>\n                            {this.state.isActive ? <h2>Clear all Favorite Images</h2> : null }\n                        </Button> : null}\n                    </div>\n            </div>\n        )\n    }\n}\n\nAllImages.propTypes = {\n    favorite_images: PropTypes.array.isRequired,\n}\n\nfunction map_state_to_props(state){\n    return {\n        favorite_images: state.favorite_images,    // must be same as initialstate in the reducer\n    }\n}\n\nexport default connect(map_state_to_props)(AllImages);\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {Provider} from 'react-redux';\nimport { persistor, store } from './store';\nimport AllImages from './components/AllImages';\nimport './App.css';\n\nclass App extends Component { \n  render() {\n    return (\n      <Provider store={store}>\n        <PersistGate loading={<div />} persistor={persistor}>\n          <MuiThemeProvider>\n            <AllImages />\n          </MuiThemeProvider>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}